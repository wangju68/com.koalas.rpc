/**
 * Autogenerated by Thrift Compiler (0.8.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package heartbeat.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Copyright (C) 2018
 * All rights reserved
 * User: 2018年12月20日11:22:31
 * Date:2018年09月18日17:44:58
 */
public class HeartBeat implements org.apache.thrift.TBase<HeartBeat, HeartBeat._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartBeat");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new HeartBeatStandardSchemeFactory());
        schemes.put(TupleScheme.class, new HeartBeatTupleSchemeFactory());
    }

    public String ip; // required
    public String serviceName; // required
    public String date; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IP((short) 1, "ip"),
        SERVICE_NAME((short) 2, "serviceName"),
        DATE((short) 3, "date");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IP
                    return IP;
                case 2: // SERVICE_NAME
                    return SERVICE_NAME;
                case 3: // DATE
                    return DATE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartBeat.class, metaDataMap);
    }

    public HeartBeat() {
    }

    public HeartBeat(
            String ip,
            String serviceName,
            String date) {
        this();
        this.ip = ip;
        this.serviceName = serviceName;
        this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HeartBeat(HeartBeat other) {
        if (other.isSetIp()) {
            this.ip = other.ip;
        }
        if (other.isSetServiceName()) {
            this.serviceName = other.serviceName;
        }
        if (other.isSetDate()) {
            this.date = other.date;
        }
    }

    public HeartBeat deepCopy() {
        return new HeartBeat(this);
    }

    @Override
    public void clear() {
        this.ip = null;
        this.serviceName = null;
        this.date = null;
    }

    public String getIp() {
        return this.ip;
    }

    public HeartBeat setIp(String ip) {
        this.ip = ip;
        return this;
    }

    public void unsetIp() {
        this.ip = null;
    }

    /**
     * Returns true if field ip is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIp() {
        return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
        if (!value) {
            this.ip = null;
        }
    }

    public String getServiceName() {
        return this.serviceName;
    }

    public HeartBeat setServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    public void unsetServiceName() {
        this.serviceName = null;
    }

    /**
     * Returns true if field serviceName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetServiceName() {
        return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
        if (!value) {
            this.serviceName = null;
        }
    }

    public String getDate() {
        return this.date;
    }

    public HeartBeat setDate(String date) {
        this.date = date;
        return this;
    }

    public void unsetDate() {
        this.date = null;
    }

    /**
     * Returns true if field date is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDate() {
        return this.date != null;
    }

    public void setDateIsSet(boolean value) {
        if (!value) {
            this.date = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case IP:
                if (value == null) {
                    unsetIp();
                } else {
                    setIp((String) value);
                }
                break;

            case SERVICE_NAME:
                if (value == null) {
                    unsetServiceName();
                } else {
                    setServiceName((String) value);
                }
                break;

            case DATE:
                if (value == null) {
                    unsetDate();
                } else {
                    setDate((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case IP:
                return getIp();

            case SERVICE_NAME:
                return getServiceName();

            case DATE:
                return getDate();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case IP:
                return isSetIp();
            case SERVICE_NAME:
                return isSetServiceName();
            case DATE:
                return isSetDate();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof HeartBeat)
            return this.equals((HeartBeat) that);
        return false;
    }

    public boolean equals(HeartBeat that) {
        if (that == null)
            return false;

        boolean this_present_ip = true && this.isSetIp();
        boolean that_present_ip = true && that.isSetIp();
        if (this_present_ip || that_present_ip) {
            if (!(this_present_ip && that_present_ip))
                return false;
            if (!this.ip.equals(that.ip))
                return false;
        }

        boolean this_present_serviceName = true && this.isSetServiceName();
        boolean that_present_serviceName = true && that.isSetServiceName();
        if (this_present_serviceName || that_present_serviceName) {
            if (!(this_present_serviceName && that_present_serviceName))
                return false;
            if (!this.serviceName.equals(that.serviceName))
                return false;
        }

        boolean this_present_date = true && this.isSetDate();
        boolean that_present_date = true && that.isSetDate();
        if (this_present_date || that_present_date) {
            if (!(this_present_date && that_present_date))
                return false;
            if (!this.date.equals(that.date))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(HeartBeat other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        HeartBeat typedOther = (HeartBeat) other;

        lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServiceName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDate()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("HeartBeat(");
        boolean first = true;

        sb.append("ip:");
        if (this.ip == null) {
            sb.append("null");
        } else {
            sb.append(this.ip);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("serviceName:");
        if (this.serviceName == null) {
            sb.append("null");
        } else {
            sb.append(this.serviceName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("date:");
        if (this.date == null) {
            sb.append("null");
        } else {
            sb.append(this.date);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class HeartBeatStandardSchemeFactory implements SchemeFactory {
        public HeartBeatStandardScheme getScheme() {
            return new HeartBeatStandardScheme();
        }
    }

    private static class HeartBeatStandardScheme extends StandardScheme<HeartBeat> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, HeartBeat struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IP
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.ip = iprot.readString();
                            struct.setIpIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SERVICE_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.serviceName = iprot.readString();
                            struct.setServiceNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.date = iprot.readString();
                            struct.setDateIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, HeartBeat struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.ip != null) {
                oprot.writeFieldBegin(IP_FIELD_DESC);
                oprot.writeString(struct.ip);
                oprot.writeFieldEnd();
            }
            if (struct.serviceName != null) {
                oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
                oprot.writeString(struct.serviceName);
                oprot.writeFieldEnd();
            }
            if (struct.date != null) {
                oprot.writeFieldBegin(DATE_FIELD_DESC);
                oprot.writeString(struct.date);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class HeartBeatTupleSchemeFactory implements SchemeFactory {
        public HeartBeatTupleScheme getScheme() {
            return new HeartBeatTupleScheme();
        }
    }

    private static class HeartBeatTupleScheme extends TupleScheme<HeartBeat> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, HeartBeat struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetIp()) {
                optionals.set(0);
            }
            if (struct.isSetServiceName()) {
                optionals.set(1);
            }
            if (struct.isSetDate()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetIp()) {
                oprot.writeString(struct.ip);
            }
            if (struct.isSetServiceName()) {
                oprot.writeString(struct.serviceName);
            }
            if (struct.isSetDate()) {
                oprot.writeString(struct.date);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, HeartBeat struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
            }
            if (incoming.get(1)) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
            }
        }
    }

}

